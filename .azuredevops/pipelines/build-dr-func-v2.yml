
resources:
  repositories:
  - repository: MockRegister
    type: git
    name: sb-mock-register
    ref: develop

trigger:
  - develop
  - main
  - releases/*
  
pool:
  vmImage: ubuntu-latest

steps:
  - checkout: MockRegister
  - checkout: self

  # Build mock-register
  - task: Docker@2
    displayName: Build mock-register image
    inputs:
      command: build 
      Dockerfile: $(Build.SourcesDirectory)/sb-mock-register/Source/Dockerfile.for-testing
      buildContext: $(Build.SourcesDirectory)/sb-mock-register/Source
      repository: mock-register
      tags: latest

  # Run integration tests
  - task: DockerCompose@0
    displayName: Integration Tests - Up
    condition: always()
    inputs:
      action: Run a Docker Compose command
      dockerComposeFile: $(Build.SourcesDirectory)/sb-mock-data-holder/Source/docker-compose.GetDataRecipients.IntegrationTests.yml     
      dockerComposeCommand: up --abort-on-container-exit --exit-code-from getdatarecipients-integration-tests

  # Remove integration tests
  - task: DockerCompose@0
    displayName: Integration Tests - Down
    condition: always()
    inputs:
      action: Run a Docker Compose command
      dockerComposeFile: $(Build.SourcesDirectory)/sb-mock-data-holder/Source/docker-compose.GetDataRecipients.IntegrationTests.yml     
      dockerComposeCommand: down

  # Publish mock-register logs
  - publish: $(Build.SourcesDirectory)/sb-mock-data-holder/Source/_temp/mock-register/tmp
    displayName: Publish MockRegister logs
    condition: always()
    artifact: Mock-Register - Logs

  # Publish mock-data-holder logs
  - publish: $(Build.SourcesDirectory)/sb-mock-data-holder/Source/_temp/mock-data-holder/tmp
    displayName: Publish MockDataHolder logs
    condition: always()
    artifact: Mock-Data-Holder - Logs

  # Login to ACR
  - task: Docker@2
    displayName: Login to ACR
    condition: always()
    inputs:
      command: login
      containerRegistry: <<yourContainerRegistryName>>

  # Run trx formatter to output .MD and .CSV
  - script: |
      docker run \
        -v=$(Build.SourcesDirectory)/sb-mock-data-holder/Source/_temp/getdatarecipients-integration-tests/testresults/results.trx:/app/results.trx:ro \
        -v=$(Build.SourcesDirectory)/sb-mock-data-holder/Source/_temp/getdatarecipients-integration-tests/testresults/formatted/:/app/out/:rw \
        <<yourContainerRegistryName>>.azurecr.io/trx-formatter -i results.trx -t "MDH-GetDataRecipients" --outputprefix "MDH-GetDataRecipients" -o out/
    displayName: 'Run trx-formatter'  
    condition: always()   

  # Publish getdatarecipients integration tests results
  - publish: $(Build.SourcesDirectory)/sb-mock-data-holder/Source/_temp/getdatarecipients-integration-tests/testresults
    displayName: Publish integration tests
    condition: always()
    artifact: GetDataRecipients - Integration tests

  - task: PublishTestResults@2
    displayName: 'Surface Integration Test TRX results to devops'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: '**/results.trx' 
      searchFolder: $(Build.SourcesDirectory)/sb-mock-data-holder/Source/_temp/getdatarecipients-integration-tests/testresults
      #mergeTestResults: false # Optional
      #failTaskOnFailedTests: false # Optional
      testRunTitle: 'getdatarecipients-integration-tests' # Optional
      #buildPlatform: # Optional
      #buildConfiguration: # Optional
      publishRunAttachments: true # Optional

# Tests have passed, so now build/publish the azure function

  - task: UseDotNet@2
    displayName: 'Install .NET 6 SDK'
    inputs:
      packageType: 'sdk'
      version: '6.0.x'
      performMultiLevelLookup: true
  
  - script: |
      cd $(Build.SourcesDirectory)/sb-mock-data-holder/Source/CDR.GetDataRecipients
      dotnet restore
      dotnet build --configuration Release
    displayName: 'Build CDR.GetDataRecipients'

  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      arguments: '--configuration Release --output publish_output'
      projects: '$(Build.SourcesDirectory)/sb-mock-data-holder/Source/CDR.GetDataRecipients/CDR.GetDataRecipients.csproj'
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
    displayName: 'DotNet publish CDR.GetDataRecipients'

  - task: ArchiveFiles@2    
    displayName: 'Archive CDR.GetDataRecipients'    
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
      includeRootFolder: false
      archiveFile: '$(System.DefaultWorkingDirectory)/CDR.GetDataRecipients.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish CDR.GetDataRecipients'  
    inputs:
      PathToPublish: '$(System.DefaultWorkingDirectory)/CDR.GetDataRecipients.zip'
      artifactName: 'functions'
