# Build pipeline v2 (Containerised)

resources:
  repositories:
  - repository: CDRAuthServer
    type: git
    name: cdr-auth-server
    ref: develop
    ####################################################################################
    # For AuthServer if develop/main/release branch changes kickoff a build DataHolder
    #https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/multi-repo-checkout?view=azure-devops#triggers
    ####################################################################################
    trigger:
      branches:
        include:
        - develop
        - main


trigger:
  - develop
  - main

variables:  
  baseSourceDirectory: $(Build.SourcesDirectory)/sb-mock-data-holder/Source


pool:
  vmImage: ubuntu-latest

jobs:
  - job: Build
    timeoutInMinutes: 120
    steps:

    ###################################################################################################
      # Set obligation date container tags
    ###################################################################################################
      - task: PowerShell@2
        displayName: Update Obligation dates banking and energy
        inputs:
          targetType: 'inline'
          script: |      
            $DataHolderObligationDate = "$(ObligationDate)"
            if (-not [string]::IsNullOrWhiteSpace( $DataHolderObligationDate )) {
              Write-Host "##vso[task.setvariable variable=ObligationDateTag]$DataHolderObligationDate"
            }
            else {
              Write-Host "##vso[task.setvariable variable=ObligationDateTag]22-4"
            }
            $EnergyDataHolderObligationDate = "$(EnergyObligationDate)"
            if (-not [string]::IsNullOrWhiteSpace( $EnergyDataHolderObligationDate )) {
              Write-Host "##vso[task.setvariable variable=EnergyObligationDateTag]$EnergyDataHolderObligationDate"
            }
            else {
              Write-Host "##vso[task.setvariable variable=EnergyObligationDateTag]22-4"
            }
      # Set release version variables for release tags
      - task: PowerShell@2        
        displayName: 'Split release branch name'  
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          targetType: 'inline'
          script: |
            $branchParts = "$(Build.SourceBranchName)" -split '\.'
            # Write-Host "Branch Name: $branchParts"
            $majorVersion = $branchParts[0]
            $minorVersion = $branchParts[1]
            # Write-Host "Major Name: $majorVersion"
            Write-Host "##vso[task.setvariable variable=majorVersion]$majorVersion"
            Write-Host "##vso[task.setvariable variable=minorVersion]$minorVersion"      
            Write-Host "##vso[task.setvariable variable=majorMinorVersion]$majorVersion.$minorVersion"

      ###################################################################################################
      # Checkout repositories
      ###################################################################################################

      - checkout: self
      - checkout: git://cdr-auth-server@refs/heads/develop
        persistCredentials: true

      ################################################################################################
        # Swith AuthServer to required branch.
      ################################################################################################
      - powershell: |   
          cd cdr-auth-server
          $branchRef = ""      
          $authServerBranch = ""
          $SourcebranchName = "$(Build.SourceBranch)" -replace 'refs/heads/', ''
          
          if ($SourcebranchName -match "releases/") {
            $authServerBranch = "$(AuthServerReleaseBranchName)"
            $branchRef = "refs/heads/$authServerBranch"
          }
          elseif ($SourcebranchName -eq "main" -or $branchName -eq "develop") {
            $authServerBranch = $branchName
            $branchRef = "$(Build.SourceBranch)"
          }
          else {
            $authServerBranch = "develop"
            $branchRef = "refs/heads/develop"
          }
          echo "authServerBranch - $authServerBranch and branchRef - $branchRef"
          if ( git ls-remote origin $branchRef) 
          {
              echo "Remote branch of $branchRef exists for cdr_auth_server"
              git switch $authServerBranch
              git status      
          }
                
          cd ..
          
        displayName: 'Switch cdr-auth-server code to required branch'

      ###################################################################################################
      # Build image
      ###################################################################################################
      
      # Copy files cdr-auth-server into the source folder of mock-data-holder
      - task: CopyFiles@2
        displayName: Copy cdr-auth-server folder into sb-mock-data-holder
        inputs:
          sourceFolder: $(Build.SourcesDirectory)/cdr-auth-server
          contents: '**' 
          targetFolder: $(baseSourceDirectory)/cdr-auth-server
      
      ###################################################################################################
      # Build Banking and Energy images
      ###################################################################################################

      - script: |
          docker build --file $(baseSourceDirectory)/Dockerfile --target Banking -t mock-data-holder:latest $(baseSourceDirectory)
        displayName: Create Banking Image
        condition: always()

      - script: |
          docker build --file $(baseSourceDirectory)/Dockerfile --target Energy -t mock-data-holder-energy:latest $(baseSourceDirectory)
        displayName: Create Energy Image
        condition: always()        

      ###################################################################################################
      # Login to ACR and pull mock solution containers
      ###################################################################################################

      # Login to ACR
      - task: Docker@2
        displayName: Login to ACR
        condition: always()
        inputs:
          command: login
          containerRegistry: $(AcrBaseUrl)
      
      # Login to Shared ACR
      - task: Docker@2
        displayName: Login to Shared ACR
        inputs:
          command: login    
          containerRegistry: $(SpSharedAcr)

      # Pull and re-tag images from Azure ACR
      - task: Bash@3
        displayName: Pull docker images from ACR
        inputs:
          targetType: inline
          script: |
            if [[ "$(Build.SourceBranchName)" = 'main' ]]; then
              mockRegisterContainerTag='main'
            elif [[ "$(Build.SourceBranch)" == "refs/heads/releases/"* ]]; then
              mockRegisterContainerTag=$(MockRegisterReleaseContainerTag)
            else
              mockRegisterContainerTag='develop'
            fi

            echo "SourceBranchName = $(Build.SourceBranchName) mockRegisterContainerTag=$mockRegisterContainerTag"

            docker pull $(AcrBaseUrl).azurecr.io/mock-register:$mockRegisterContainerTag
            docker tag $(AcrBaseUrl).azurecr.io/mock-register:$mockRegisterContainerTag mock-register:latest

      # List docker images
      - task: Docker@2
        displayName: List Docker images
        condition: always()
        inputs:
          command: images

      ###################################################################################################
      # Unit tests
      ###################################################################################################

      # Run unit tests
      - script: |
          docker compose --file $(baseSourceDirectory)/DockerCompose/docker-compose.UnitTests.yml up --abort-on-container-exit --exit-code-from mock-data-holder-unit-tests
        displayName: Unit Tests - Up
        condition: always()

      # Remove unit tests
      - script: |
          docker compose --file $(baseSourceDirectory)/DockerCompose/docker-compose.UnitTests.yml down 
        displayName: 'Unit Tests - Down' 
        condition: always()        

      ###################################################################################################
      # Integration tests - Banking
      ###################################################################################################

      # Run Banking integration tests
      - script: |
          docker compose --file $(baseSourceDirectory)/DockerCompose/docker-compose.IntegrationTests.Banking.yml up --abort-on-container-exit --exit-code-from mock-data-holder-integration-tests
        displayName: 'Integration Tests - Banking - Up'  
        condition: always()
           
      # Output Docker Logs
      - script: |
          docker logs mock-register-mdhb-int
          docker logs mock-data-holder-banking-mdhb-int
          docker logs mock-data-holder-banking-integration-tests-mdhb-int
          docker logs sql-mdhb-int
        displayName: 'Output MDHB Docker Logs'  
        condition: always()

      # Remove integration tests
      - script: |
          docker compose --file $(baseSourceDirectory)/DockerCompose/docker-compose.IntegrationTests.Banking.yml down 
        displayName: 'Integration Tests - Banking - Down' 
        condition: always()        

      ###################################################################################################
      # Integration tests - Energy
      ###################################################################################################

      # Run Energy integration tests
      - script: |
          docker compose --file $(baseSourceDirectory)/DockerCompose/docker-compose.IntegrationTests.Energy.yml up --abort-on-container-exit --exit-code-from mock-data-holder-integration-tests
        displayName: 'Integration Tests - Energy - Up'  
        condition: always()
       
      # Output Docker Logs
      - script: |
          docker logs mock-register-mdhe-int
          docker logs mock-data-holder-energy-mdhe-int
          docker logs mock-data-holder-energy-integration-tests-mdhe-int
          docker logs sql-mdhe-int
        displayName: 'Output MDHE Docker Logs'  
        condition: always()

      # Remove integration tests
      - script: |
          docker compose --file $(baseSourceDirectory)/DockerCompose/docker-compose.IntegrationTests.Energy.yml down 
        displayName: 'Integration Tests - Energy - Down'  
        condition: always()        

      ###################################################################################################
      # Remove Redundant Docker Images to Reclaim Disk Space
      ###################################################################################################

      - script: |
          docker rmi mock-data-holder-unit-tests
          docker rmi mock-register
          docker rmi $(AcrBaseUrl).azurecr.io/mock-register:$(mockRegisterContainerTag)
          docker rmi mock-data-holder-integration-tests-banking          
          docker rmi mock-data-holder-integration-tests-energy
          docker rmi mcr.microsoft.com/mssql/server:2019-latest
          docker image prune -f
        displayName: 'Remove Redundant Docker Images'  
        condition: always()    

      ###################################################################################################
      # Publish images
      ###################################################################################################

      # Save docker image to TAR so it can be published
      - task: Docker@2
        displayName: Save MockDataHolder image to TAR
        inputs:
          repository: mock-data-holder
          command: save
          arguments: --output $(build.artifactstagingdirectory)/mock-data-holder.image.tar mock-data-holder
          addPipelineData: false

      # Publish docker image
      - task: PublishPipelineArtifact@1
        displayName: Publish container images
        inputs:
          path: $(build.artifactstagingdirectory)
          artifact: Container Images

      ###################################################################################################
      # Publish test results - Banking
      ###################################################################################################

      # Run trx formatter to output .MD and .CSV
      - script: |
          docker run \
            -v=$(baseSourceDirectory)/DockerCompose/_temp/mock-data-holder-banking-integration-tests/testresults/results.trx:/app/results.trx:ro \
            -v=$(baseSourceDirectory)/DockerCompose/_temp/mock-data-holder-banking-integration-tests/testresults/formatted/:/app/out/:rw \
            $(AcrBaseUrl).azurecr.io/trx-formatter -i results.trx -t "MDH" --outputprefix "MDH" -o out/
        displayName: "Run trx-formatter for Banking Integration Tests"
        condition: always()

      # Publish mock-data-holder Banking integration tests results
      - publish: $(baseSourceDirectory)/DockerCompose/_temp/mock-data-holder-banking-integration-tests
        displayName: Publish Banking Integration Tests Results
        condition: always()
        artifact: Mock-Data-Holder - Banking - Integration tests

      # Surface trx
      - task: PublishTestResults@2
        displayName: 'Surface test results for Banking Integration Tests to devops'
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/results.trx'
          searchFolder: $(baseSourceDirectory)/DockerCompose/_temp/mock-data-holder-banking-integration-tests # Optional
          testRunTitle: 'mock-data-holder-banking-integration-tests'
          
      # ###################################################################################################
      # # Publish test results - Energy
      # ###################################################################################################

      # Run trx formatter to output .MD and .CSV
      - script: |
          docker run \
            -v=$(baseSourceDirectory)/DockerCompose/_temp/mock-data-holder-energy-integration-tests/testresults/results.trx:/app/results.trx:ro \
            -v=$(baseSourceDirectory)/DockerCompose/_temp/mock-data-holder-energy-integration-tests/testresults/formatted/:/app/out/:rw \
            $(AcrBaseUrl).azurecr.io/trx-formatter -i results.trx -t "MDHE" --outputprefix "MDHE" -o out/
        displayName: "Run trx-formatter for Energy Integration Tests"
        condition: always()

      # Publish mock-data-holder Energy integration tests results
      - publish: $(baseSourceDirectory)/DockerCompose/_temp/mock-data-holder-energy-integration-tests
        displayName: Publish Energy Integration Tests Results
        condition: always()
        artifact: Mock-Data-Holder - Energy - Integration tests

      # Surface trx
      - task: PublishTestResults@2
        displayName: 'Surface test results for Energy Integration Tests to devops'
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/results.trx'
          searchFolder: $(baseSourceDirectory)/DockerCompose/_temp/mock-data-holder-energy-integration-tests # Optional
          testRunTitle: 'mock-data-holder-energy-integration-tests'

      ###################################################################################################
      # EF migrations
      ###################################################################################################

      - task: UseDotNet@2
        displayName: 'Use .NET 6 sdk'
        condition: always()
        inputs:
          packageType: sdk
          version: '6.0.x'
          performMultiLevelLookup: true

      - task: CmdLine@2
        displayName: 'Install dotnet-ef'
        condition: always()
        inputs:
          script: 'dotnet tool install --version 7.0.13 --global dotnet-ef'

      - task: CmdLine@2
        displayName: 'Check dotnet-ef version'
        condition: always()
        inputs:
          script: 'dotnet-ef'

      
      # MDH Banking
      - script: |
          cd $(baseSourceDirectory)/Banking/CDR.DataHolder.Banking.Repository
          dotnet ef migrations bundle --context BankingDataHolderDatabaseContext --verbose --self-contained
          ls
        displayName: 'Run EF Migrations bundle (Banking)'
        condition: always()

      - publish: $(baseSourceDirectory)/Banking/CDR.DataHolder.Banking.Repository/efbundle
        displayName: Publish EF Migration bundle (Banking)
        condition: always()
        artifact: Database Migration Scripts (Banking)

      # MDH Energy
      - script: |
          cd $(baseSourceDirectory)/Energy/CDR.DataHolder.Energy.Repository
          dotnet ef migrations bundle --context EnergyDataHolderDatabaseContext --verbose --self-contained
          ls
        displayName: 'Run EF Migrations bundle (Energy)'
        condition: always()

      - publish: $(baseSourceDirectory)/Energy/CDR.DataHolder.Energy.Repository/efbundle
        displayName: Publish EF Migration bundle (Energy)
        condition: always()
        artifact: Database Migration Scripts (Energy)

      # CdrAuthServer
      - script: |
          cd $(Build.SourcesDirectory)/sb-mock-data-holder/Source/cdr-auth-server/Source/CdrAuthServer.Repository
          dotnet ef migrations bundle --context CdrAuthServervDatabaseContext --verbose --self-contained
          ls
        displayName: 'Run EF Migrations bundle (CdrAuthServer)'
        condition: always()

      - publish: $(Build.SourcesDirectory)/sb-mock-data-holder/Source/cdr-auth-server/Source/CdrAuthServer.Repository/efbundle
        displayName: Publish EF Migration bundle (CdrAuthServer)
        condition: always()
        artifact: Database Migration Scripts (CdrAuthServer)    

      ###################################################################################################
      # Tag images and push to ACR
      ###################################################################################################

      # mock-data-holder
      - task: Docker@2
        displayName: 'Re-Tag Mock Data Holder image with :branch-name'
        inputs:
          containerRegistry: $(AcrBaseUrl)
          repository: 'mock-data-holder'
          command: tag
          arguments: 'mock-data-holder $(AcrBaseUrl).azurecr.io/mock-data-holder:$(Build.SourceBranchName)'
                     
      - task: Docker@2
        displayName: 'Re-Tag Mock Data Holder image with :latest (for develop branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          containerRegistry: $(AcrBaseUrl)
          repository: 'mock-data-holder'
          command: tag
          arguments: 'mock-data-holder $(AcrBaseUrl).azurecr.io/mock-data-holder:latest'

      - task: Docker@2
        displayName: 'Push MDH image with :branch-name tag to ACR'        
        inputs:
          containerRegistry: $(AcrBaseUrl)
          repository: mock-data-holder
          command: 'push'
          tags: |
           $(Build.SourceBranchName)

      - task: Docker@2
        displayName: 'Push MDH image with :latest tag to ACR (develop branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          containerRegistry: $(AcrBaseUrl)
          repository: mock-data-holder
          command: 'push'
          tags: |
           latest
    
      # mock-data-holder-energy
      - task: Docker@2
        displayName: 'Re-Tag Mock Data Holder Energy image with :branch-name'
        inputs:
          containerRegistry: $(AcrBaseUrl)
          repository: 'mock-data-holder-energy'
          command: tag
          arguments: 'mock-data-holder-energy $(AcrBaseUrl).azurecr.io/mock-data-holder-energy:$(Build.SourceBranchName)'

      - task: Docker@2
        displayName: 'Re-Tag Mock Data Holder Energy image with :latest (for develop branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          containerRegistry: $(AcrBaseUrl)
          repository: 'mock-data-holder-energy'
          command: tag
          arguments: 'mock-data-holder-energy $(AcrBaseUrl).azurecr.io/mock-data-holder-energy:latest'
      
      - task: Docker@2
        displayName: 'Push MDH Energy image with :branch-name tag to ACR'        
        inputs:
          containerRegistry: $(AcrBaseUrl)
          repository: mock-data-holder-energy
          command: 'push'
          tags: |
           $(Build.SourceBranchName)

      - task: Docker@2
        displayName: 'Push MDH Energy image with :latest tag to ACR (develop branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          containerRegistry: $(AcrBaseUrl)
          repository: mock-data-holder-energy
          command: 'push'
          tags: |
           latest

      ###################################################################################################
      # Tag images and push to Shared ACR
      ###################################################################################################
      # Pipeline variables are required : SharedAcrBaseUrl and SpSharedAcr
      
      ################################# MDH Banking tags starts ##########################################      
      # mdh develop tags: latest, latest-obligationdate, buildnumber
      - task: Bash@3
        displayName: 'Re-Tags MDH image with develop tags for shared ACR'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          targetType: inline
          script: |
           docker tag mock-data-holder $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:develop-latest
           docker tag mock-data-holder $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:develop-latest-$(ObligationDateTag)
           docker tag mock-data-holder $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:$(Build.BuildId)
            
      # mdh main tags: latest, latest-obligationdate, buildnumber
      - task: Bash@3
        displayName: 'Re-Tags MDH image with main tags for shared ACR'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          targetType: inline
          script: |
           docker tag mock-data-holder $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:main-latest
           docker tag mock-data-holder $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:main-latest-$(ObligationDateTag)
           docker tag mock-data-holder $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:$(Build.BuildId)
      
      # mdh release tags
      - task: Bash@3
        displayName: 'Re-Tags MDH image with release in tags for shared ACR'
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          targetType: inline
          script: |
           docker tag mock-data-holder $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:$(Build.SourceBranchName)
           docker tag mock-data-holder $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:$(Build.SourceBranchName)-$(ObligationDateTag)
           docker tag mock-data-holder $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:$(majorMinorVersion)
           docker tag mock-data-holder $(SharedAcrBaseUrl).azurecr.io/mock-data-holder:$(majorVersion)
      ################################# MDH Banking tags ends ##########################################
      
      ################################# MDH Energy tags starts ##########################################      
      # mdh energy develop tags: latest, latest-obligationdate, buildnumber
      - task: Bash@3
        displayName: 'Re-Tags MDH energy image with develop tags for shared ACR'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          targetType: inline
          script: |
           docker tag mock-data-holder-energy $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:develop-latest
           docker tag mock-data-holder-energy $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:develop-latest-$(EnergyObligationDateTag)
           docker tag mock-data-holder-energy $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:$(Build.BuildId)
            
      # mdh energy main tags: latest, latest-obligationdate, buildnumber
      - task: Bash@3
        displayName: 'Re-Tags MDH energy image with main tags for shared ACR'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          targetType: inline
          script: |
           docker tag mock-data-holder-energy $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:main-latest
           docker tag mock-data-holder-energy $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:main-latest-$(EnergyObligationDateTag)
           docker tag mock-data-holder-energy $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:$(Build.BuildId)
      
      # mdh energy release tags
      - task: Bash@3
        displayName: 'Re-Tags MDH energy image with release tags for shared ACR'
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          targetType: inline
          script: |
           docker tag mock-data-holder-energy $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:$(Build.SourceBranchName)
           docker tag mock-data-holder-energy $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:$(Build.SourceBranchName)-$(EnergyObligationDateTag)
           docker tag mock-data-holder-energy $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:$(majorMinorVersion)
           docker tag mock-data-holder-energy $(SharedAcrBaseUrl).azurecr.io/mock-data-holder-energy:$(majorVersion)
      ################################# MDH Energy tags ends ##########################################

      ########################### MDH Banking tags push starts ##########################################
      # Push banking image develop tags to Shared ACR
      - task: Docker@2
        displayName: 'Push banking develop tags to Shared ACR'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: mock-data-holder
          command: 'push'
          tags: |
           develop-latest
           develop-latest-$(ObligationDateTag)
           $(Build.BuildId)

      # Push banking image main tags to Shared ACR
      - task: Docker@2
        displayName: 'Push banking main tags to Shared ACR'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: mock-data-holder
          command: 'push'
          tags: |
           main-latest
           main-latest-$(ObligationDateTag)
           $(Build.BuildId)
           
      # Push banking image release tags to Shared ACR
      - task: Docker@2
        displayName: 'Push banking release tags to Shared ACR'
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: mock-data-holder
          command: 'push'
          tags: |
           $(Build.SourceBranchName)
           $(Build.SourceBranchName)-$(ObligationDateTag)
           $(majorMinorVersion)
           $(majorVersion)
      ########################### MDH Banking tags push ends ##########################################

      ########################### MDH Energy tags push starts ##########################################
      # Push energy image develop tags to Shared ACR
      - task: Docker@2
        displayName: 'Push energy develop tags to Shared ACR'        
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: mock-data-holder-energy
          command: 'push'
          tags: |
           develop-latest
           develop-latest-$(EnergyObligationDateTag)
           $(Build.BuildId)

      # Push energy image main tags to Shared ACR
      - task: Docker@2
        displayName: 'Push energy main tags to Shared ACR'        
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: mock-data-holder-energy
          command: 'push'
          tags: |
           main-latest
           main-latest-$(EnergyObligationDateTag)
           $(Build.BuildId)
           
      # Push energy image release tags to Shared ACR
      - task: Docker@2
        displayName: 'Push energy release tags to Shared ACR'
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: mock-data-holder-energy
          command: 'push'
          tags: |
           $(Build.SourceBranchName)
           $(Build.SourceBranchName)-$(EnergyObligationDateTag)
           $(majorMinorVersion)
           $(majorVersion)
      ########################### MDH Energy tags push ends ##########################################